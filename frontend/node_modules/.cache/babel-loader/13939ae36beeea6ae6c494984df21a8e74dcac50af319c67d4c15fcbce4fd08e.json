{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nirob\\\\OneDrive\\\\Desktop\\\\roxiler_systems\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import BasicTable from './components/BasicTable'\n\n// function App() {\n//   return (\n//    <BasicTable/>\n//   );\n// }\n\n// export default App;\n\nimport axios from \"axios\";\nimport React, { useMemo, useState, useEffect } from \"react\";\nimport Table from \"./BasicTable\";\n// import \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  /* \n    - Columns is a simple array right now, but it will contain some logic later on. It is recommended by react-table to memoize the columns data\n    - Here in this example, we have grouped our columns into two headers. react-table is flexible enough to create grouped table headers\n  */\n\n  const columns = useMemo(() => [{\n    // first group - TV Show\n    Header: \"TV Show\",\n    // First group columns\n    columns: [{\n      Header: \"Name\",\n      accessor: \"show.name\"\n    }, {\n      Header: \"Type\",\n      accessor: \"show.type\"\n    }]\n  }, {\n    // Second group - Details\n    Header: \"Details\",\n    // Second group columns\n    columns: [{\n      Header: \"Language\",\n      accessor: \"show.language\"\n    }, {\n      Header: \"Genre(s)\",\n      accessor: \"show.genres\"\n    }, {\n      Header: \"Runtime\",\n      accessor: \"show.runtime\"\n    }, {\n      Header: \"Status\",\n      accessor: \"show.status\"\n    }]\n  }], []);\n\n  // data state to store the TV Maze API data. Its initial value is an empty array\n  const [data, setData] = useState([]);\n\n  // Using useEffect to call the API once mounted and set the data\n  useEffect(() => {\n    (async () => {\n      const result = await axios(\"https://api.tvmaze.com/search/shows?q=snow\");\n      setData(result.data);\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TYGuL0g4zE67Bs30rnnW+EaJADk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["axios","React","useMemo","useState","useEffect","Table","jsxDEV","_jsxDEV","App","_s","columns","Header","accessor","data","setData","result","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nirob/OneDrive/Desktop/roxiler_systems/frontend/src/App.js"],"sourcesContent":["// import BasicTable from './components/BasicTable'\n\n// function App() {\n//   return (\n//    <BasicTable/>\n//   );\n// }\n\n// export default App;\n\n\nimport axios from \"axios\";\nimport React, { useMemo, useState, useEffect } from \"react\";\n\nimport Table from \"./BasicTable\";\n// import \"./App.css\";\n\nfunction App() {\n  /* \n    - Columns is a simple array right now, but it will contain some logic later on. It is recommended by react-table to memoize the columns data\n    - Here in this example, we have grouped our columns into two headers. react-table is flexible enough to create grouped table headers\n  */\n\n  const columns = useMemo(\n    () => [\n      {\n        // first group - TV Show\n        Header: \"TV Show\",\n        // First group columns\n        columns: [\n          {\n            Header: \"Name\",\n            accessor: \"show.name\",\n          },\n          {\n            Header: \"Type\",\n            accessor: \"show.type\",\n          },\n        ],\n      },\n      {\n        // Second group - Details\n        Header: \"Details\",\n        // Second group columns\n        columns: [\n          {\n            Header: \"Language\",\n            accessor: \"show.language\",\n          },\n          {\n            Header: \"Genre(s)\",\n            accessor: \"show.genres\",\n          },\n          {\n            Header: \"Runtime\",\n            accessor: \"show.runtime\",\n          },\n          {\n            Header: \"Status\",\n            accessor: \"show.status\",\n          },\n        ],\n      },\n    ],\n    []\n  );\n\n  // data state to store the TV Maze API data. Its initial value is an empty array\n  const [data, setData] = useState([]);\n\n  // Using useEffect to call the API once mounted and set the data\n  useEffect(() => {\n    (async () => {\n      const result = await axios(\"https://api.tvmaze.com/search/shows?q=snow\");\n      setData(result.data);\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Table columns={columns} data={data} />\n    </div>\n  );\n}\nexport default App;"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,OAAO,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3D,OAAOC,KAAK,MAAM,cAAc;AAChC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;AACF;AACA;AACA;;EAEE,MAAMC,OAAO,GAAGR,OAAO,CACrB,MAAM,CACJ;IACE;IACAS,MAAM,EAAE,SAAS;IACjB;IACAD,OAAO,EAAE,CACP;MACEC,MAAM,EAAE,MAAM;MACdC,QAAQ,EAAE;IACZ,CAAC,EACD;MACED,MAAM,EAAE,MAAM;MACdC,QAAQ,EAAE;IACZ,CAAC;EAEL,CAAC,EACD;IACE;IACAD,MAAM,EAAE,SAAS;IACjB;IACAD,OAAO,EAAE,CACP;MACEC,MAAM,EAAE,UAAU;MAClBC,QAAQ,EAAE;IACZ,CAAC,EACD;MACED,MAAM,EAAE,UAAU;MAClBC,QAAQ,EAAE;IACZ,CAAC,EACD;MACED,MAAM,EAAE,SAAS;MACjBC,QAAQ,EAAE;IACZ,CAAC,EACD;MACED,MAAM,EAAE,QAAQ;MAChBC,QAAQ,EAAE;IACZ,CAAC;EAEL,CAAC,CACF,EACD,EACF,CAAC;;EAED;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACAC,SAAS,CAAC,MAAM;IACd,CAAC,YAAY;MACX,MAAMW,MAAM,GAAG,MAAMf,KAAK,CAAC,4CAA4C,CAAC;MACxEc,OAAO,CAACC,MAAM,CAACF,IAAI,CAAC;IACtB,CAAC,EAAE,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA;IAAKS,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBV,OAAA,CAACF,KAAK;MAACK,OAAO,EAAEA,OAAQ;MAACG,IAAI,EAAEA;IAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEV;AAACZ,EAAA,CAlEQD,GAAG;AAAAc,EAAA,GAAHd,GAAG;AAmEZ,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}