{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nirob\\\\OneDrive\\\\Desktop\\\\roxiler_systems\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import BasicTable from './components/BasicTable'\n\n// function App() {\n//   return (\n//    <BasicTable/>\n//   );\n// }\n\n// export default App;\n\nimport axios from \"axios\";\nimport React, { useMemo, useState, useEffect } from \"react\";\nimport Table from \"./components/BasicTable\";\n// import \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  /* \n    - Columns is a simple array right now, but it will contain some logic later on. It is recommended by react-table to memoize the columns data\n    - Here in this example, we have grouped our columns into two headers. react-table is flexible enough to create grouped table headers\n  */\n\n  const columns = useMemo(() => [{\n    Header: 'ID',\n    accessor: 'id'\n  }, {\n    Header: 'Title',\n    accessor: 'title'\n  }, {\n    Header: 'Description',\n    accessor: 'description'\n  }, {\n    Header: 'Price',\n    accessor: 'price'\n  }, {\n    Header: 'Category',\n    accessor: 'category'\n  }, {\n    Header: 'Sold',\n    accessor: 'sold'\n  }, {\n    Header: 'Image',\n    accessor: 'image'\n  }], []);\n\n  // data state to store the TV Maze API data. Its initial value is an empty array\n  const [data, setData] = useState([]);\n\n  // Using useEffect to call the API once mounted and set the data\n  useEffect(() => {\n    (async () => {\n      const result = await axios.get('http://localhost:3000/api/product/productTransactions', {\n        params: {\n          page: 1,\n          limit: 10,\n          search: 'November'\n        }\n      });\n      setData(result.data.transactions);\n      console.log(data);\n    })();\n  }, []);\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TYGuL0g4zE67Bs30rnnW+EaJADk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["axios","React","useMemo","useState","useEffect","Table","jsxDEV","_jsxDEV","App","_s","columns","Header","accessor","data","setData","result","get","params","page","limit","search","transactions","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nirob/OneDrive/Desktop/roxiler_systems/frontend/src/App.js"],"sourcesContent":["// import BasicTable from './components/BasicTable'\n\n// function App() {\n//   return (\n//    <BasicTable/>\n//   );\n// }\n\n// export default App;\n\n\nimport axios from \"axios\";\nimport React, { useMemo, useState, useEffect } from \"react\";\n\nimport Table from \"./components/BasicTable\";\n// import \"./App.css\";\n\nfunction App() {\n  /* \n    - Columns is a simple array right now, but it will contain some logic later on. It is recommended by react-table to memoize the columns data\n    - Here in this example, we have grouped our columns into two headers. react-table is flexible enough to create grouped table headers\n  */\n\n  const columns = useMemo(\n    () => [\n      {\n        Header:'ID',\n        accessor:'id'\n    },\n    {\n        Header:'Title',\n        accessor:'title'\n    },\n    {\n        Header:'Description',\n        accessor:'description'\n    },\n    {\n        Header:'Price',\n        accessor:'price'\n    },\n    {\n        Header:'Category',\n        accessor:'category'\n    },\n    {\n        Header:'Sold',\n        accessor:'sold'\n    },\n    {\n        Header:'Image',\n        accessor:'image'\n    },\n    ],\n    []\n  );\n\n  // data state to store the TV Maze API data. Its initial value is an empty array\n  const [data, setData] = useState([]);\n\n  // Using useEffect to call the API once mounted and set the data\n  useEffect(() => {\n    (async () => {\n      const result = await axios.get('http://localhost:3000/api/product/productTransactions', {\n        params: {\n          page: 1,\n          limit: 10,\n          search: 'November',\n        },\n      })\n      setData(result.data.transactions);\n      console.log(data);\n    })();\n  }, []);\n  console.log(data);\n  return (\n    <div className=\"App\">\n      <Table columns={columns} data={data} />\n    </div>\n  );\n}\nexport default App;"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,OAAO,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3D,OAAOC,KAAK,MAAM,yBAAyB;AAC3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;AACF;AACA;AACA;;EAEE,MAAMC,OAAO,GAAGR,OAAO,CACrB,MAAM,CACJ;IACES,MAAM,EAAC,IAAI;IACXC,QAAQ,EAAC;EACb,CAAC,EACD;IACID,MAAM,EAAC,OAAO;IACdC,QAAQ,EAAC;EACb,CAAC,EACD;IACID,MAAM,EAAC,aAAa;IACpBC,QAAQ,EAAC;EACb,CAAC,EACD;IACID,MAAM,EAAC,OAAO;IACdC,QAAQ,EAAC;EACb,CAAC,EACD;IACID,MAAM,EAAC,UAAU;IACjBC,QAAQ,EAAC;EACb,CAAC,EACD;IACID,MAAM,EAAC,MAAM;IACbC,QAAQ,EAAC;EACb,CAAC,EACD;IACID,MAAM,EAAC,OAAO;IACdC,QAAQ,EAAC;EACb,CAAC,CACA,EACD,EACF,CAAC;;EAED;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACAC,SAAS,CAAC,MAAM;IACd,CAAC,YAAY;MACX,MAAMW,MAAM,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,uDAAuD,EAAE;QACtFC,MAAM,EAAE;UACNC,IAAI,EAAE,CAAC;UACPC,KAAK,EAAE,EAAE;UACTC,MAAM,EAAE;QACV;MACF,CAAC,CAAC;MACFN,OAAO,CAACC,MAAM,CAACF,IAAI,CAACQ,YAAY,CAAC;MACjCC,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;IACnB,CAAC,EAAE,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EACNS,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;EACjB,oBACEN,OAAA;IAAKiB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBlB,OAAA,CAACF,KAAK;MAACK,OAAO,EAAEA,OAAQ;MAACG,IAAI,EAAEA;IAAK;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEV;AAACpB,EAAA,CA/DQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAgEZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}