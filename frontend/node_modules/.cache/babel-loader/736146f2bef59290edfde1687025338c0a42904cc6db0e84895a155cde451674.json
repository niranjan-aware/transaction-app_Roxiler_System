{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nirob\\\\OneDrive\\\\Desktop\\\\roxiler_systems\\\\frontend\\\\src\\\\components\\\\BarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BarChart() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/product/barChartsInfo?month=November');\n        const result = await response.json();\n        setData(result.result);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (data.length > 0) {\n      // Destroy existing charts\n      Chart.helpers.each(Chart.instances, instance => {\n        instance.destroy();\n      });\n\n      // Create a new chart\n      const ctx = document.getElementById('yourCanvasId').getContext('2d');\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: data.map(d => d._id),\n          datasets: [{\n            label: 'Range',\n            data: data.map(item => item.count)\n          }]\n        },\n        options: {\n          scales: {\n            x: {\n              type: 'category',\n              labels: data.map(d => d._id),\n              beginAtZero: true\n            },\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"yourCanvasId\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n}\n_s(BarChart, \"MNW7rnkI9oNPb711ySWHHHkbM9Y=\");\n_c = BarChart;\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["React","useEffect","useState","Bar","Chart","jsxDEV","_jsxDEV","BarChart","_s","data","setData","fetchData","response","fetch","result","json","error","console","length","helpers","each","instances","instance","destroy","ctx","document","getElementById","getContext","type","labels","map","d","_id","datasets","label","item","count","options","scales","x","beginAtZero","y","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nirob/OneDrive/Desktop/roxiler_systems/frontend/src/components/BarChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart } from 'chart.js/auto';\r\n\r\nfunction BarChart() {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3000/api/product/barChartsInfo?month=November');\r\n        const result = await response.json();\r\n        setData(result.result);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      // Destroy existing charts\r\n      Chart.helpers.each(Chart.instances, (instance) => {\r\n        instance.destroy();\r\n      });\r\n\r\n      // Create a new chart\r\n      const ctx = document.getElementById('yourCanvasId').getContext('2d');\r\n      new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: data.map((d) => d._id),\r\n          datasets: [\r\n            {\r\n              label: 'Range',\r\n              data: data.map((item) => item.count),\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          scales: {\r\n            x: {\r\n              type: 'category',\r\n              labels: data.map((d) => d._id),\r\n              beginAtZero: true,\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n        },\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n  return <canvas id=\"yourCanvasId\" />;\r\n}\r\n\r\nexport default BarChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,iBAAiB;AACrC,SAASC,KAAK,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAgE,CAAC;QAC9F,MAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACpCL,OAAO,CAACI,MAAM,CAACA,MAAM,CAAC;MACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAENV,SAAS,CAAC,MAAM;IACd,IAAIQ,IAAI,CAACS,MAAM,GAAG,CAAC,EAAE;MACnB;MACAd,KAAK,CAACe,OAAO,CAACC,IAAI,CAAChB,KAAK,CAACiB,SAAS,EAAGC,QAAQ,IAAK;QAChDA,QAAQ,CAACC,OAAO,CAAC,CAAC;MACpB,CAAC,CAAC;;MAEF;MACA,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;MACpE,IAAIvB,KAAK,CAACoB,GAAG,EAAE;QACbI,IAAI,EAAE,KAAK;QACXnB,IAAI,EAAE;UACJoB,MAAM,EAAEpB,IAAI,CAACqB,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,CAAC;UAC9BC,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,OAAO;YACdzB,IAAI,EAAEA,IAAI,CAACqB,GAAG,CAAEK,IAAI,IAAKA,IAAI,CAACC,KAAK;UACrC,CAAC;QAEL,CAAC;QACDC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDX,IAAI,EAAE,UAAU;cAChBC,MAAM,EAAEpB,IAAI,CAACqB,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,CAAC;cAC9BQ,WAAW,EAAE;YACf,CAAC;YACDC,CAAC,EAAE;cACDD,WAAW,EAAE;YACf;UACF;QACF;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAAC/B,IAAI,CAAC,CAAC;EAEV,oBAAOH,OAAA;IAAQoC,EAAE,EAAC;EAAc;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrC;AAACtC,EAAA,CAtDQD,QAAQ;AAAAwC,EAAA,GAARxC,QAAQ;AAwDjB,eAAeA,QAAQ;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}